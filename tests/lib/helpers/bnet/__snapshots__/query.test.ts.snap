// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`query() calls onAccessTokenExpired() if provided and access token is invalid 1`] = `
{
  "error": "access_token_invalid",
}
`;

exports[`query() calls onAccessTokenRefresh() if provided and refreshExpiredAccessToken is set to true 1`] = `
{
  "access_token": "new_refreshed_access_token",
  "headers": {
    "Authorization": "Bearer new_refreshed_access_token",
  },
  "params": {
    "data": "default sample params",
  },
  "timeout": 10000,
  "title": "sample mocked data for GET request to https://us.api.blizzard.com/valid/endpoint",
}
`;

exports[`query() refreshes access token if refreshExpiredAccessToken is set to true 1`] = `
{
  "access_token": "new_refreshed_access_token",
  "headers": {
    "Authorization": "Bearer new_refreshed_access_token",
  },
  "params": {
    "data": "default sample params",
  },
  "timeout": 10000,
  "title": "sample mocked data for GET request to https://us.api.blizzard.com/valid/endpoint",
}
`;

exports[`query() respects timeout option 1`] = `
{
  "access_token": "valid_access_token",
  "headers": {
    "Authorization": "Bearer valid_access_token",
  },
  "params": {
    "data": "default sample params",
  },
  "timeout": 123456,
  "title": "sample mocked data for GET request to https://us.api.blizzard.com/valid/endpoint",
}
`;

exports[`query() returns correct response for GET request to a valid uri 1`] = `
{
  "access_token": "valid_access_token",
  "headers": {
    "Authorization": "Bearer valid_access_token",
  },
  "params": {
    "data": "default sample params",
  },
  "timeout": 10000,
  "title": "sample mocked data for GET request to https://us.api.blizzard.com/sc2/sample/endpoint",
}
`;

exports[`query() returns correct response for GET request with params to a valid uri 1`] = `
{
  "access_token": "valid_access_token",
  "headers": {
    "Authorization": "Bearer valid_access_token",
  },
  "params": {
    "data": "test params",
  },
  "timeout": 10000,
  "title": "sample mocked data for GET request to https://us.api.blizzard.com/sc2/sample/endpoint",
}
`;

exports[`query() returns error if validateAccessTokenOnEachQuery is set to false and access token is invalid 1`] = `
{
  "error": "access_token_invalid",
}
`;

exports[`query() returns error if validateAccessTokenOnEachQuery is set to true and access token is invalid 1`] = `
{
  "error": "access_token_invalid",
}
`;

exports[`query() validates access token if validateAccessTokenOnEachQuery is set to true 1`] = `
{
  "access_token": "valid_access_token",
  "headers": {
    "Authorization": "Bearer valid_access_token",
  },
  "params": {
    "data": "default sample params",
  },
  "timeout": 10000,
  "title": "sample mocked data for GET request to https://us.api.blizzard.com/valid/endpoint",
}
`;
